import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboard import keyboard, get_tags_keyboard, choise_enter_tags
from test_data import tag_list

TOKEN = "TOKEN_HERE"


class UploadFileState(StatesGroup):
    waiting_for_file = State()
    choosing_admin_tags = State()
    entering_user_tags = State()


class BotHandler:
    def __init__(self):
        self.bot = Bot(token=TOKEN)
        self.dp = Dispatcher()
        self.user_tags = {}

        """
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
            –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã,
            –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
        """
        self.dp.message.register(self.start, Command("start"))
        self.dp.message.register(self.ask_for_file, F.text == "üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")               # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        self.dp.message.register(self.handle_file, F.document, UploadFileState.waiting_for_file) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–µ–≥–∏.
        self.dp.callback_query.register(self.admin_tag_callback, F.data.startswith("tag_admin_"))# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è—è –∏–ª–∏ —É–¥–∞–ª—è—è –∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞.
        self.dp.callback_query.register(self.skip_user_tags, F.data == "skip_user_tags")        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞
        self.dp.callback_query.register(self.choose_user_tags, F.data == "choose_user_tags")    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
        self.dp.message.register(self.enter_user_tag, UploadFileState.entering_user_tags)
        self.dp.callback_query.register(self.choose_user_tags, F.data == "choose_user_tags")     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤.
        self.dp.message.register(self.enter_user_tag, UploadFileState.entering_user_tags)        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤.
        self.dp.callback_query.register(self.confirm_file, F.data == "confirm_file")             # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
                                                                                                 # –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏.

    @staticmethod
    def get_admin_tags():
        return [tag["name"] for tag in tag_list[0]]

    @staticmethod
    def get_user_tags():
        return [tag["name"] for tag in tag_list[1]]

    async def start(self, message: Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        await state.clear()
        self.user_tags[message.from_user.id] = {"admin": [], "user": []}
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard)
        await state.set_state(UploadFileState.waiting_for_file)

    async def ask_for_file(self, message: Message, state: FSMContext):
        """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª."""
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª üìé")
        await state.set_state(UploadFileState.waiting_for_file)

    async def handle_file(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–µ–≥–∏."""
        await state.update_data(file_id=message.document.file_id)
        await message.answer("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–µ–≥–∏:",
                             reply_markup=get_tags_keyboard(self.get_admin_tags(), "admin", []))
        await state.set_state(UploadFileState.choosing_admin_tags)

    async def admin_tag_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ–≥–æ–≤."""
        tag_slug = callback.data.replace("tag_admin_", "")
        user_id = callback.from_user.id

        if user_id not in self.user_tags:
            self.user_tags[user_id] = {"admin": [],
                                       "user": []}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        if tag_slug in self.user_tags[user_id]["admin"]:
            self.user_tags[user_id]["admin"].remove(tag_slug)
        else:
            self.user_tags[user_id]["admin"].append(tag_slug)

        await callback.message.edit_reply_markup(
            reply_markup=get_tags_keyboard(
                self.get_admin_tags(), "admin",
                self.user_tags[user_id]["admin"]
            )
        )

        if self.user_tags[user_id]["admin"]:
            await callback.message.edit_reply_markup(
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        get_tags_keyboard(self.get_admin_tags(), "admin", self.user_tags[user_id]["admin"]).inline_keyboard[0],
                        [InlineKeyboardButton(text="‚û° –í–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏", callback_data="choose_user_tags")]
                    ]
                )
            )

    async def skip_user_tags(self, callback: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –∏ —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ñ–∞–π–ª."""
        user_id = callback.from_user.id
        self.user_tags[user_id][
            "user"] = []  # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        await self.confirm_file(callback, state)

    async def choose_user_tags(self, callback: CallbackQuery,
                               state: FSMContext):
        """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥."""
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=choise_enter_tags
        )
        await state.set_state(UploadFileState.entering_user_tags)

    async def enter_user_tag(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤."""
        user_id = message.from_user.id
        user_input = message.text.strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        user_tags = [tag.strip() for tag in user_input.split(",") if
                     tag.strip()]

        if not user_tags:
            await message.answer(
                "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
        self.user_tags[user_id]["user"].extend(user_tags)
        await state.update_data(
            user_tags=self.user_tags[user_id]["user"])  # –û–±–Ω–æ–≤–ª—è–µ–º state

        await message.answer(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(user_tags)}")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                          callback_data="confirm_file")]
                ]
            )
        )

    @staticmethod
    def prepare_data_for_sending(file_id: str, file_data: bytes,
                                 admin_tags: list, user_tags: list) -> dict:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ API –±–µ–∫–µ–Ω–¥–∞.
        :param file_id: ID —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        :param file_data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        :param admin_tags: –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
        :param user_tags: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
        :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        data = {
            "file_id": file_id,
            "file_data": file_data,  # –§–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ –±–∞–π—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            "admin_tags": admin_tags,
            "user_tags": user_tags
        }
        return data

    async def confirm_file(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–µ–≥–∞–º–∏."""
        user_id = callback.from_user.id
        data = await state.get_data()
        file_id = data.get("file_id")

        if not file_id:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        admin_tags_text = ", ".join(self.user_tags[user_id]["admin"]) if self.user_tags[user_id]["admin"] else None
        user_tags_text = ", ".join(self.user_tags[user_id]["user"]) if self.user_tags[user_id]["user"] else None

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ bot.get_file
        file = await self.bot.get_file(file_id)
        file_path = file.file_path  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Telegram
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_data = await self.bot.download_file(file_path)
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        prepared_data = self.prepare_data_for_sending(file_id, file_data, self.user_tags[user_id]["admin"], self.user_tags[user_id]["user"])
        print(type(prepared_data['file_data']))  # –í—ã–≤–æ–¥–∏–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)

        await self.bot.send_document(
            callback.message.chat.id, file_id,
            caption=f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Ç–µ–≥–∞–º–∏:\n\n–ê–¥–º–∏–Ω—Å–∫–∏–µ: {admin_tags_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {user_tags_text}"
        )
        await state.clear()
        await callback.message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", reply_markup=keyboard)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot_handler = BotHandler()
    asyncio.run(bot_handler.run())
